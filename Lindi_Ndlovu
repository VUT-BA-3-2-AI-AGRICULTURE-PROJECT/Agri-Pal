Theory part
Solution Techniques
1.	Use metrics such as Mean Squared Error (MSE), Root Mean Squared Error (RMSE), and R-squared to assess models.
2.	Based on the outcomes of the evaluation, choose the model that performs the best.
3.	Using the user-provided current environmental conditions (such as weather, and soil moisture), use the chosen model to forecast crop diseases.

Practical part
Crop disease dectection model

from keras import Sequential
from keras import preprocessing
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

import os
import numpy as np
import tensorflow as tf
import keras as k
from keras.preprocessing.image import ImageDataGenerator
from keras.applications import MobileNetV2
from keras.layers import Dense, GlobalAveragePooling2D
from keras.models import Model
from keras.optimizers import Adam
from keras.models import load_model
from keras.preprocessing import image

# Data paths for each crop
tomato_train_dir = '/content/drive/MyDrive/Apple/Tomato/Train'
tomato_test_dir = '/content/drive/MyDrive/Apple/Tomato/Test'
tomato_val_dir = '/content/drive/MyDrive/Apple/Tomato/Val'

# Data preprocessing and augmentation
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1.0/255)

# Data preprocessing and augmentation for Tomato
tomato_train_generator = train_datagen.flow_from_directory(
    tomato_train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

tomato_test_generator = test_datagen.flow_from_directory(
    tomato_test_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

# Build model architecture for Tomato
tomato_base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = tomato_base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
tomato_predictions = Dense(tomato_train_generator.num_classes, activation='softmax')(x)
tomato_model = Model(inputs=tomato_base_model.input, outputs=tomato_predictions)

# Compile the Tomato model
tomato_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the Tomato model
tomato_history = tomato_model.fit(
    tomato_train_generator,
    steps_per_epoch=len(tomato_train_generator),
    epochs=3,
    validation_data=tomato_test_generator,
    validation_steps=len(tomato_test_generator)
)
# Evaluate the Tomato model
tomato_evaluation = tomato_model.evaluate(
    tomato_test_generator,
    steps=len(tomato_test_generator)
)
print("Tomato Test Loss:", tomato_evaluation[0])
print("Tomato Test Accuracy:", tomato_evaluation[1])

# After training and evaluating the Tomato model
tomato_model.save('tomato_disease_model.h5')

# Function to predict tomato crop disease
def predict_tomato_disease(image_path, model_tomato):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
    prediction = model.predict(img_array)
    class_idx = np.argmax(prediction)
    class_label = tomato_train_generator.class_indices[class_idx]
    return class_label,prediction[0]
